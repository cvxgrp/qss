name: Main Test

on:
  push:
  pull_request:
    branches: [main]
    types: [opened, edited, reopened]
jobs:
    run-tests:
        runs-on: ubuntu-latest
        environment: test
        strategy:
          fail-fast: false
          matrix:
            python-version: [ "3.10", "3.11", "3.12" ]
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Install Python
            uses: actions/setup-python@v5
            with:
              python-version: ${{ matrix.python-version }}

          - name: Install Python Dependencies
            run: |
              curl -LsSf https://astral.sh/uv/install.sh | sh
              uv pip install --system --break-system-packages -r requirements.txt
              uv pip install --system --break-system-packages pytest pytest-cov pytest-github-report pytest-github-actions-annotate-failures

          - name: Run Unit Tests
            env:
              pytest_github_report: true
              pytest_verbosity: 2
            run: pytest -v --cov=src --cov-report=xml --cov-report=term-missing --color=yes tests/

    test-build-pypi:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Install Python
            uses: actions/setup-python@v5
            with:
              python-version: "3.9"

          - name: Install Twine and Build
            run: sudo pip install twine build

          - name: Create the distribution
            run: |
              git fetch --prune --unshallow --tags
              sudo python3 -m build

    test-build-conda:
        runs-on: ubuntu-latest
# sets default shell to remove need for source to run the conda shell
        defaults:
          run:
            shell: bash -l {0}
        steps:
          - name: Checkout Repository
            uses: actions/checkout@v4

          - name: Install Python
            uses: actions/setup-python@v5
            with:
              python-version: "3.9"

          - name: Install Miniconda
            uses: conda-incubator/setup-miniconda@v3
            with:
              auto-activate-base: true
              activate-environment: ""
              miniconda-version: "latest"

          - name: Install the Conda Dependencies
            run: |
              conda config --set always_yes yes --set auto_update_conda false
              conda update conda
              conda install -n base conda-libmamba-solver
              conda install python=3.9 conda-build colorama pip ruamel ruamel.yaml rich jsonschema -c conda-forge
              git fetch --prune --unshallow --tags
              pip install -e .


# run install twice due to client-size to ensure all files downloaded
# echo yes before login to prevent anaconda bug breaking automation
# git tags MUST be fetched otherwise output will be blank
# bash variables cannot be used in github actions, must use actions specific syntax and methods
          - name: Build the Anaconda Package
            id: condabuild
            run: |
              conda install anaconda-client
              conda clean --all
              conda config --set anaconda_upload no --set solver libmamba
              VERSION_FROM_GIT_TAG=$(git tag --list "v*[0-9]" --sort=version:refname | tail -1 | cut -c 2-)test conda build . -c conda-forge -c stanfordcvxgrp
              echo "gitversion=$(git tag --list "v*[0-9]" --sort=version:refname | tail -1 | cut -c 2-)" >> $GITHUB_OUTPUT
